let mongoose,bcrypt;_3cc‍.x([["default",()=>_3cc‍.o]]);_3cc‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_3cc‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);


const { Schema } = mongoose;

const MemberSchema = new Schema({
    id: String,
    password: String,
    userName: String,
    phoneNumber: String,
    address: String,
    email: String
});

// MemberSchema.methods.setPassword = async function(inputPassword) {
//     const hash = await bcrypt.hash(inputPassword, 10);
//     this.password = hash;
// };

// MemberSchema.methods.checkPassword = async function(inputPassword) {
//     const result = await bcrypt.compare(inputPassword, this.password);
//     return result;
// };

// MemberSchema.methods.findById = function(inputId) {
//     return this.findOne({ inputId })
// }

const Member = mongoose.model('Member', MemberSchema);
_3cc‍.d(Member);