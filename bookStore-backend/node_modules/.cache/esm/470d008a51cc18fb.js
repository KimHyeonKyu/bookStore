let Koa,Router,mongoose,api,bodyParser,jwtMiddleware;_51c‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_51c‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_51c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_51c‍.w("./api",[["default",["api"],function(v){api=v}]]);_51c‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_51c‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();







// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
    .connect(MONGO_URI)
        .then(() => {
            console.log('Connectes to MongoDB');
        })
        .catch(e => {
            _51c‍.g.console.error(e);
        });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

// PORT가 지정되어 있지 않다면 4000을 설정
const port = PORT || 4000; 
app.listen(port, () => {
    _51c‍.g.console.log('Listening to port %d', port);
  });